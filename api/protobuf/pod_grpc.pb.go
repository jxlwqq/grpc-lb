// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PodClient is the client API for Pod service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodClient interface {
	GetInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type podClient struct {
	cc grpc.ClientConnInterface
}

func NewPodClient(cc grpc.ClientConnInterface) PodClient {
	return &podClient{cc}
}

func (c *podClient) GetInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.protobuf.pod/getInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodServer is the server API for Pod service.
// All implementations must embed UnimplementedPodServer
// for forward compatibility
type PodServer interface {
	GetInfo(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedPodServer()
}

// UnimplementedPodServer must be embedded to have forward compatible implementations.
type UnimplementedPodServer struct {
}

func (UnimplementedPodServer) GetInfo(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedPodServer) mustEmbedUnimplementedPodServer() {}

// UnsafePodServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodServer will
// result in compilation errors.
type UnsafePodServer interface {
	mustEmbedUnimplementedPodServer()
}

func RegisterPodServer(s grpc.ServiceRegistrar, srv PodServer) {
	s.RegisterService(&Pod_ServiceDesc, srv)
}

func _Pod_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.protobuf.pod/getInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).GetInfo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Pod_ServiceDesc is the grpc.ServiceDesc for Pod service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pod_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.protobuf.pod",
	HandlerType: (*PodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getInfo",
			Handler:    _Pod_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pod.proto",
}
